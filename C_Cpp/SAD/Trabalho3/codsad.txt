char nome[20];


void delay(int d){
	int i = 0;
	int j = 0;
	for (i = 0; i<d ; i++){ 
		for (j = 0; j < 300 ; j ++){}
	}
}

void inttoStr(int x, char *string){

	sprintf(string, "%d\r\n", x);
}

/*********************************************************Funções USART**************************************************/
void initUSART(){
     SPBRG=25; // Baud Rate para 4 MHz
     TXSTAbits.BRGH=1; //High Speed Communication
     
     TXSTAbits.SYNC=0; //Asynchronous data transfer
     RCSTAbits.SPEN=1; //Serial Port enabled
     
     TXSTAbits.TXEN=1; //Transmit Enabled, also sets bit TXIF
     RCSTAbits.CREN=1; //Enables Continuous receive in Asynchronous mode       
}

void transmitChar(char c){

		while(!TXIF);
		TXREG=c;
}	

void transmitString(char s[]){
    
	int i=0;
		
	while(s[i]!='\0') transmitChar(s[i++]);
	transmitChar('\n');						
}
	
char receiveChar(){
    
    if(OERR){ // check for error
        CREN=0;
        CREN=1;
    }
		
	while(!RCIF);		
	return RCREG;
}
	
char *receiveString(char *s){
		

	char ch;
	do{
        ch = receiveChar();
        *s = ch;
        s++;
    }while(ch!='\r' && ch!='\n');
	s--;
	*s = '\0';
    return s;
	//while((ch=receiveChar())!='\0')	
}
/************************************************************************************************************************/

/*********************************************************Funções ADC****************************************************/
void ADC_init(){
    ADCON0 = 0x01; //ADON a 1
    ADCON1=0x02;
   
}

int ADC_read(int ch){
    
    unsigned int i;
    ADCON1=0x02;
    ADCON0bits.CHS = ch;
    ADCON0bits.GO_nDONE = 1;
    delay(10);
    while(ADCON0bits.GO_nDONE == 1){}
    
    i = ((ADRESH<<8) | (ADRESL & 0xff));
    
    return i;
}


/************************************************************************************************************************/

void init_fan(){
    CCP1CON = 0x0f;
    PR2 = 0xf9;
    CCPR1L = 0xff;
    TMR2ON = 1;
}

void fan_value(){
    int wind = ADC_read(WIND);
    transmitString("A obter valores. \n");
    CCPR1L = wind >> 2;
}

/*int read_fan(){
    TMR1 = 0;
    TMR1ON = 1;
    count_t0();
    TMR1ON = 0;
    return (unsigned)TMR1;
     
}*/

void temp_Control(){
    
    if(PORTBbits.RB3 == 0){
        PORTCbits.RC5 =! PORTCbits.RC5;   
    }
  
}

void temp_Values(){
    
    int temp = (ADC_read(TEMP)*10)/2;
    inttoStr(temp, nome);
    transmitString(nome);
    
}

int hum_read(){
    int hum = ADC_read(HUM);
    return ((0.0977)*hum);
}

/*********************************************************Funções PASS***************************************************/

char keyboardInput(){
    //TECLADO MATRICIAL
       
    PORTB=0xFF;
    TRISB=0; //PORTB a output
    PORTD=0xFF;
    TRISD=0xFF;//PORTD a input

    while(1){
        PORTBbits.RB1=0; //Habilita coluna 1
        if (!PORTDbits.RD3) {delay(10); return '1';}
        else if (!PORTDbits.RD2) {delay(10); return '4';}
        else if (!PORTDbits.RD1) {delay(10); return '7';}
        else if (!PORTDbits.RD0) {delay(10); return '*';}
        delay(10);
        PORTBbits.RB1=1; //DESHabilita coluna 1   

        PORTBbits.RB2=0; //Habilita coluna 2
        if (!PORTDbits.RD3) {delay(10); return '2';}
        else if (!PORTDbits.RD2) {delay(10); return '5';}
        else if (!PORTDbits.RD1) {delay(10); return '8';}
        else if (!PORTDbits.RD0) {delay(10); return '0';}
        delay(10);
        PORTBbits.RB2=1; //DESHabilita coluna 2 

        PORTBbits.RB0=0; //Habilita coluna 3
        if (!PORTDbits.RD3) {delay(10); return '3';}
        else if (!PORTDbits.RD2) {delay(10); return '6';}
        else if (!PORTDbits.RD1) {delay(10); return '9';}
        else if (!PORTDbits.RD0) {delay(10); return '#';}
        delay(10);
        PORTBbits.RB0=1; //DESHabilita coluna 3
    }
}

unsigned char code7s(char v)
{
  switch(v)
  {
    case '0':
      return 0x3F;
    case '1':
      return 0x06;
    case '2':
      return 0x5B;
    case '3':
      return 0x4F;
    case '4':
      return 0x66;
    case '5':
      return 0x6D;
    case '6':
      return 0x7D;
    case '7':
      return 0x07;
    case '8':
      return 0x7F;
    case '9':
      return 0x6F;
    default:
      return 3;
  }
}

void display7s (char code, char j){
    ADCON1 = 6; //configura todos os pinos AD como I/O
    PORTA = 0; //resseta todos os pinos do porta
    TRISA = 0; //define porta como saida
    TRISD = 0; //define portd como saida
    PORTD = 255; //seta todos os pinos do portd
   
    
    delay(30);
    switch(j)
      {
         case 3: 
           PORTA=0x20;
           break;
         case 2: 
           PORTA=0x10;
           break;
         case 1: 
           PORTA=0x08;
           break;
         case 0: 
           PORTA=0x04;
           break;
       }
    PORTD=code7s(code);
    delay(70);
    PORTA=0;
    PORTD=0;
}

int password(){
    
    char code[5]="----\0";
    char i = 0; 
    char erase;
    
    transmitString("Introduza a password e confirme com a tecla #\r\n");
    for(i=0;i<4;i++){
            code[i]= keyboardInput();
            if (code[i]=='*')return 0;        
            display7s(code[i],i);  
        }
    while(keyboardInput()!='#');
    if(!strcmp(code,PASS)){
        transmitString("Password correta. Bem vindo\r\n\n");
        for(i=0;i<4;i++){
        PORTA=0x3C;
        PORTD=0xFF;
        delay(10);
        PORTA=0;
        PORTD=0;
        delay(20);
        }
        return 1;    
    }
    else{
        transmitString("Password incorreta! Tente outra vez.\r\n\n");
        return 0;

    }   
}

/************************************************************************************************************************/

int main(void) {
   
   initUSART();
   ADC_init();
   
   ADCON1=0x0F;
   ADCON1 = 0x06;                      // Define AD's pin as general I/O
   PORTA=0;
   TRISA=0;
   TRISD=0;
   TRISE=0;       
   TRISBbits.TRISB3 = 1;
   TRISBbits.TRISB0 = 1;
   TRISCbits.TRISC5 = 0;
   TRISDbits.TRISD0 = 0;
   PORTDbits.RD0 = 0;
  
   char string[20];
   char tmp=0;
   int val;
   int ventoinha;
     
   int i = 0;
   init_fan();

    do{
        //if(password()){
            while(1){
                
                //transmitString("OLA!\r\n");
                
                val=ADC_read(WIND);
                inttoStr(val, string);
                transmitString(string);
                //temp_Control();

                //fan_value();

                //hum_read();

                /*ventoinha = ADC_read(HUM);
                inttoStr (ventoinha, nome);
                transmitString(nome);

                ventoinha = (ADC_read(WIND));
                inttoStr(ventoinha, nome);
                transmitString(nome);*/
            }
        //}
    }while(1);    
}